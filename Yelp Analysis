import os
import torch
from torch import nn
from torch.utils.data import DataLoader, Dataset
!pip install transformers
import transformers
from transformers import BertTokenizer, BertModel, AdamW, get_linear_schedule_with_warmup
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import pandas as pd
!pip install bertopic
from bertopic import BERTopic

rev_1 = pd.read_csv('restaurant_1_star_review_file-2.csv')
df_rev_1 = rev_1['text'].dropna()
topic_model = BERTopic()
topics_1, probs_1 = topic_model.fit_transform(df_rev_1)

# Continuing from where you left off
rev_1 = pd.read_csv('restaurant_1_star_review_file-2.csv')
df_rev_1 = rev_1['text'].dropna()

# Transform the 1-star reviews using the same model trained on 2-star reviews
topics_1, probs_1 = topic_model.transform(df_rev_1)

# Get the top words for each topic in 1-star reviews
topics_1_words = topic_model.get_topics()

# Define the number of topics to visualize
num_topics_to_plot = 25

for topic_id, words in list(topics_1_words.items())[:num_topics_to_plot]:
    words = [word[0] for word in words]

    # Clean the frequencies and convert to integers
    frequencies = [int(word[1]) if word[1].isdigit() else 0 for word in words]

    # Create a separate plot for each topic in 1-star reviews
    plt.figure(figsize=(8, 4))
    plt.bar(words, frequencies)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title(f'Top Words in Topic {topic_id} (1-star reviews)')
    plt.xticks(rotation=45)

    # Display the actual numeric frequencies on the y-axis
    for i, v in enumerate(frequencies):
        plt.text(i, v + 0.1, str(v), ha='center', va='bottom')

    plt.tight_layout()
    plt.show()


topics_1_words = topic_model.get_topics()

# Define the number of topics to visualize
num_topics_to_plot = 25

for topic_id, words in list(topics_1_words.items())[:num_topics_to_plot]:
    words = [word[0] for word in words]

    # Extract the frequencies directly, skipping non-numeric values
    frequencies = [int(word[1]) if word[1].isdigit() else 0 for word in words]

    # Create a separate plot for each topic in 1-star reviews
    plt.figure(figsize=(8, 4))
    plt.bar(words, frequencies)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title(f'Top Words in Topic {topic_id} (1-star reviews)')
    plt.xticks(rotation=45)

    # Display the actual numeric frequencies on the y-axis
    for i, v in enumerate(frequencies):
        plt.text(i, v + 0.1, str(v), ha='center', va='bottom')

    plt.tight_layout()
    plt.show()




# Get the top words for each topic in 1-star reviews
topics_1_words = topic_model.get_topics()

# Define the number of topics to visualize
num_topics_to_plot = 25

for topic_id, words in list(topics_1_words.items())[:num_topics_to_plot]:
    words = [word[0] for word in words]

    # Print words and frequencies for debugging
    print(f'Topic {topic_id}: Words={words}')

    # Extract the frequencies directly, skipping non-numeric values
    frequencies = [int(word[1]) if word[1].isdigit() else 0 for word in words]

    # Create a separate plot for each topic in 1-star reviews
    plt.figure(figsize=(8, 4))
    plt.bar(words, frequencies)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title(f'Top Words in Topic {topic_id} (1-star reviews)')
    plt.xticks(rotation=45)

    # Display the actual numeric frequencies on the y-axis
    for i, v in enumerate(frequencies):
        plt.text(i, v + 0.1, str(v), ha='center', va='bottom')

    plt.tight_layout()
    plt.show()

# ... (Previous code)

# Continuing from where you left off
rev_1 = pd.read_csv('restaurant_1_star_review_file-2.csv')
df_rev_1 = rev_1['text'].dropna()

# Transform the 1-star reviews using the same model trained on 2-star reviews
topics_1, probs_1 = topic_model.transform(df_rev_1)

# Get the top words for each topic in 1-star reviews
topics_1_words = topic_model.get_topics()

# Define the number of topics to visualize
num_topics_to_plot = 25

for topic_id, words in list(topics_1_words.items())[:num_topics_to_plot]:
    words = [word[0] for word in words]

    # Extract the frequencies directly, skipping non-numeric values
    frequencies = [int(word[1]) if str(word[1]).isdigit() else 0 for word in words]

    # Create a separate plot for each topic in 1-star reviews
    plt.figure(figsize=(12, 6))
    plt.bar(words, frequencies)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title(f'Top Words in Topic {topic_id} (1-star reviews)')
    plt.xticks(rotation=45, ha='right')  # Rotate and align x-axis labels for better visibility

    # Display the actual numeric frequencies on the bars
    for i, v in enumerate(frequencies):
        plt.text(i, v + 0.1, str(v), ha='center', va='bottom')

    plt.tight_layout()
    plt.show()

import matplotlib.pyplot as plt

# Get the top words for each topic
topics = topic_model.get_topics()

# Define the number of topics to visualize
num_topics_to_plot = 25

for topic_id, words in list(topics.items())[:num_topics_to_plot]:
    words = [word[0] for word in words]
    frequencies = [word[1] for word in words]

    # Create a separate plot for each topic
    plt.figure(figsize=(8, 4))
    plt.bar(words, frequencies)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title(f'Top Words in Topic {topic_id}')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
plt.savefig(f'topic_{topic_id}_1_star_reviews.png')


# Get the top words for each topic
topics = topic_model.get_topics()

# Define the number of topics to visualize
num_topics_to_plot = 25

for topic_id, words in list(topics.items())[:num_topics_to_plot]:
    words = [word[0] for word in words]
    frequencies = [word[1] for word in words]

    # Create a separate plot for each topic
    plt.figure(figsize=(8, 4))
    plt.bar(words, frequencies)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title(f'Top Words in Topic {topic_id}')
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Save the graph as an image file
    plt.savefig(f'topic_{topic_id}_graph.png')

    # Show the plot
    plt.show()



rev_2 = pd.read_csv('restaurant_2_star_review_file-2.csv')
df_rev_2 = rev_1['text'].dropna()
topic_model = BERTopic()
topics_2, probs_2 = topic_model.fit_transform(df_rev_2)

# Get the top words for each topic
topics = topic_model.get_topics()

# Define the number of topics to visualize
num_topics_to_plot = 25

for topic_id, words in list(topics.items())[:num_topics_to_plot]:
    words = [word[0] for word in words]
    frequencies = [word[1] for word in words]

    # Create a separate plot for each topic
    plt.figure(figsize=(8, 4))
    plt.bar(words, frequencies)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title(f'Top Words in Topic {topic_id}')
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Save the graph as an image file
    plt.savefig(f'topic_{topic_id}_graph.png')

    # Show the plot
    plt.show()


rev_4 = pd.read_csv('restaurant_4_star_review_file-2.csv')
df_rev_4 = rev_1['text'].dropna()
topic_model = BERTopic()
topics_4, probs_4 = topic_model.fit_transform(df_rev_4)

# Get the top words for each topic
topics = topic_model.get_topics()

# Define the number of topics to visualize
num_topics_to_plot = 100

for topic_id, words in list(topics.items())[:num_topics_to_plot]:
    words = [word[0] for word in words]
    frequencies = [word[1] for word in words]

    # Create a separate plot for each topic
    plt.figure(figsize=(4, 4))
    plt.bar(words, frequencies)
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title(f'Top Words in Topic {topic_id}')
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Save the graph as an image file
    plt.savefig(f'topic_4star{topic_id}_graph.png')

    # Show the plot
    plt.show()


print(f"Number of obtained topics: {len(topics)}")

topic_model.get_topic_freq()

# Get all topics and their associated words
all_topics = topic_model.get_topics()
save_path = '/Users/farhanrashid/Downloads/Yelp Project Dataset/topic.txt'
# Print all topics
for topic_id, words in all_topics.items():
    print(f"Topic {topic_id}: {words}")
print(f"Topics saved to {save_path}")




